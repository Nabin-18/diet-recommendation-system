generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  resetOtp         String?
  resetOtpExpiry   DateTime?
  dob              DateTime?
  gender           String
  image            String?
  currentWeight    Float?
  lastWeightUpdate DateTime?
  Feedbacks        Feedback[]
  Notifications    Notification[]
  PredictedDetails PredictedDetails[]
  UserInputDetails UserInputDetails[]
}

model UserInputDetails {
  id               Int               @id @default(autoincrement())
  height           Int
  weight           Int
  age              Int
  gender           String
  goal             String
  activityType     String
  preferences      String
  healthIssues     String
  mealPlan         String?           @default("balanced")
  userId           Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cycleNumber      Int?
  endDate          DateTime
  startDate        DateTime
  feedback         Feedback?
  predictedDetails PredictedDetails?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications    Notification[]    @relation("InputDetailNotifications")
}

model PredictedDetails {
  id             Int              @id @default(autoincrement())
  predictionDate DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         Int
  bmi            Float?
  bmr            Float?
  calorie_target Float?
  tdee           Float?
  expectedWeight Float?
  Instructions   String?
  Name           String?
  calories       Float?
  carbs          Float?
  fats           Float?
  fiber          Float?
  image          String?
  inputId        Int              @unique
  protein        Float?
  sodium         Float?
  sugar          Float?
  meals          MealPrediction[]
  inputDetail    UserInputDetails @relation(fields: [inputId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MealPrediction {
  id                    Int              @id @default(autoincrement())
  name                  String
  target_calories       Float
  optimized_calories    Float
  calories              Float
  fat                   Float
  carbs                 Float
  protein               Float
  fiber                 Float
  sugar                 Float
  sodium                Float
  image                 String
  instructions          String
  calorie_match_pct     Float
  optimized_ingredients Json?
  predictionId          Int
  prediction            PredictedDetails @relation(fields: [predictionId], references: [id], onDelete: Cascade)
}

model Feedback {
  id            Int              @id @default(autoincrement())
  weightChange  String?
  achieved      Boolean
  note          String?
  userId        Int
  inputDetailId Int              @unique
  createdAt     DateTime         @default(now())
  inputDetail   UserInputDetails @relation(fields: [inputDetailId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  sentAt      DateTime @default(now())
  read        Boolean  @default(false)
  userId      Int
  title       String
  type        String
  hasFeedback Boolean? @default(false)
  relatedId   Int?

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedInput UserInputDetails? @relation("InputDetailNotifications", fields: [relatedId], references: [id], onDelete: Cascade)
}
