datasource db {
  provider = "postgresql" // or your DB provider, e.g. "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  image            String?
  gender           String
  dob              DateTime?
  resetOtp         String?
  resetOtpExpiry   DateTime?
  currentWeight    Float?
  lastWeightUpdate DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  UserInputDetails UserInputDetails[]
  PredictedDetails PredictedDetails[]
  Feedbacks        Feedback[]
  Notifications    Notification[]
}

model UserInputDetails {
  id            Int     @id @default(autoincrement())
  height        Int
  weight        Int
  age           Int
  gender        String
  goal          String
  activityType  String
  preferences   String
  healthIssues  String
  mealPlan      String? @default("balanced") // Make optional with default value
  mealFrequency Int     @default(3) // Add back mealFrequency field

  // New Fields
  startDate   DateTime // start of 15-day plan
  endDate     DateTime // end of 15-day plan
  cycleNumber Int // 1st, 2nd, 3rd cycle...

  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  feedback         Feedback?
  predictedDetails PredictedDetails?
}

model PredictedDetails {
  id             Int      @id @default(autoincrement())
  bmr            Float?
  tdee           Float?
  bmi            Float?
  calorie_target Float?
  Name           String?
  calories       Float?
  protein        Float?
  carbs          Float?
  fats           Float?
  sodium         Float?
  fiber          Float?
  sugar          Float?
  Instructions   String?
  image          String?
  predictionDate DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId Int
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals  MealPrediction[]

  // Link back to input
  inputId     Int              @unique
  inputDetail UserInputDetails @relation(fields: [inputId], references: [id], onDelete: Cascade)
}

model MealPrediction {
  id                    Int    @id @default(autoincrement())
  name                  String
  target_calories       Float
  optimized_calories    Float
  calories              Float
  fat                   Float
  carbs                 Float
  protein               Float
  fiber                 Float
  sugar                 Float
  sodium                Float
  image                 String
  instructions          String
  calorie_match_pct     Float
  optimized_ingredients Json?

  predictionId Int
  prediction   PredictedDetails @relation(fields: [predictionId], references: [id], onDelete: Cascade)
}

model Feedback {
  id           Int     @id @default(autoincrement())
  weightChange Float?
  achieved     Boolean
  note         String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  inputDetailId Int              @unique
  inputDetail   UserInputDetails @relation(fields: [inputDetailId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Notification {
  id      Int      @id @default(autoincrement())
  message String
  type    String
  title   String
  sentAt  DateTime @default(now())
  read    Boolean  @default(false)
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
