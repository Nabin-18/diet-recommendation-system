// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  output     = "../generated/prisma"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//create user model 

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  image            String?
  gender           String
  dob              DateTime?
  resetOtp         String?
  resetOtpExpiry   DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserInputDetails UserInputDetails[]
  PredictedDetails PredictedDetails[]
}

model UserInputDetails {
  id           Int    @id @default(autoincrement()) //primary key
  height       Int
  weight       Int
  age          Int
  gender       String
  goal         String
  activityType String
  preferences  String
  healthIssues String
  mealPlan     String

  userId    Int //foreign key to User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PredictedDetails {
  id               Int    @id @default(autoincrement())
  bmr              Float?
  tdee             Float?
  bmi              Float?
  calorie_target   Float?
  actual_calories  Float?
  calorie_accuracy Float?

  predictionDate DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  userId Int
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals  MealPrediction[] // 1 prediction has many meals
}

model MealPrediction {
  id                 Int    @id @default(autoincrement())
  name               String
  target_calories    Float
  optimized_calories Float
  calories           Float
  fat                Float
  carbs              Float
  protein            Float
  fiber              Float
  sugar              Float
  sodium             Float
  image              String
  instructions       String
  calorie_match_pct  Float

  
  optimized_ingredients Json

  // Relation back to prediction
  predictionId Int
  prediction   PredictedDetails @relation(fields: [predictionId], references: [id], onDelete: Cascade)
}
